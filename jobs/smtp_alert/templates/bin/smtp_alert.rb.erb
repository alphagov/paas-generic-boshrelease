#!/usr/bin/env /var/vcap/packages/ruby_3.1.3/bin/ruby

require 'net/smtp'
require 'logger'
require 'pagerduty'

host              = <%= p('smtp_alert.smarthost').inspect %>
port              = 587
msgstr            = 'This is a test message'
sender            = <%= p('smtp_alert.from').inspect %>
recipient         = 'success@simulator.amazonses.com'
subject           = 'Amazon SES smtp test'
domain            = 'digital.cabinet-office.gov.uk'
user              = <%= p('smtp_alert.auth_username').inspect %>
pass              = <%= p('smtp_alert.auth_password').inspect %>
incident_key_file = '/var/vcap/store/smtp_alert/alert.txt'
pd_service_key    = <%= p('smtp_alert.pager_duty_service_key').inspect %>
env               = <%= p('smtp_alert.metrics_environment').inspect %>
$log_file         = '/var/vcap/sys/log/smtp_alert/smtp_alert.log'
pd_summary_str    = 'DOWN alert: [%s] PaaS AWS SMTP is down'
pd_source_str     = 'smtp alert on alertmanager vm'

module LogStuff
  extend self
  def logger
    @logger ||= Logger.new($log_file)
  end
end

def test_smtp(host, port, domain, user, pass, msgstr, sender, recipient)
  smtp = Net::SMTP.new host, port
  smtp.enable_starttls
  smtp.start(domain) do |server|
      server.auth_login user, pass
      server.send_message msgstr, sender, recipient
  end
  LogStuff.logger.debug "method: " + __method__.to_s + ", email sent successfully"
  return false, ""
rescue Exception => e  
  LogStuff.logger.error "method: " + __method__.to_s + ", error: " + e.message
  return true, e.message
end

def call_pagerduty(pd_summary_str, pd_source_str, env, pd_service_key, incident_key, smtp_error, event_action)
  summary_str = sprintf(pd_summary_str, env.strip)
  pagerduty = Pagerduty.build(
    integration_key: pd_service_key,
    api_version:     2
  )
  incident = pagerduty.incident(incident_key)
  
  if event_action == "trigger"
    incident.trigger(
      summary:        summary_str,
      source:         pd_source_str,
      severity:       "error",
      custom_details: { error: smtp_error }
    )
  else
    incident.resolve
  end
  return
rescue Net::HTTPClientException => error
  LogStuff.logger.error "method: " + __method__.to_s + ", response code: " + error.response.code
  LogStuff.logger.error "method: " + __method__.to_s + ", response message: " + error.response.message
  LogStuff.logger.error "method: " + __method__.to_s + ", response body: " + error.response.body
  raise
rescue Exception => error  
  LogStuff.logger.error "method: " + __method__.to_s + ", error: " + error.message
  raise
end

begin
  incident_key =  ""
  LogStuff.logger.level = Logger::ERROR
  
  result, err = test_smtp(host, port, domain, user, pass, msgstr, sender, recipient)
  
  if (File.file?(incident_key_file))
    open(incident_key_file, "r") {|f| 
      incident_key =  f.read.strip
    }
  end

  if (result)
    if (incident_key.empty?)
      incident_key = Time.now.strftime('%d-%m-%Y-%H-%M-%S')
      aFile = File.new(incident_key_file, "w+")
      aFile.syswrite(incident_key)
    end
    call_pagerduty(pd_summary_str, pd_source_str, env, pd_service_key, incident_key, err, "trigger")
  else
    if (File.file?(incident_key_file))
      call_pagerduty(pd_summary_str, pd_source_str, env, pd_service_key, incident_key, "dummy", "resolve")
      File.delete(incident_key_file)
    end
  end

  LogStuff.logger.debug "Script: " + File.basename($PROGRAM_NAME) + " completed successfully"
rescue Exception => e  
  LogStuff.logger.error "Script: " + File.basename($PROGRAM_NAME) + " exited with error: " + e.message
end
